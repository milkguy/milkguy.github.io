<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>代码随想录第一天</title>
    <link href="/2022/12/07/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <url>/2022/12/07/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<p>代码随想录训练营刷题第一天</p><span id="more"></span><h2 id="第一题，leetcode-704二分查找"><a href="#第一题，leetcode-704二分查找" class="headerlink" title="第一题，leetcode 704二分查找"></a>第一题，leetcode 704二分查找</h2><p><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找 - 力扣（Leetcode）</a></p><ul><li>拿到题目以后，首先想到的是暴力解法，数的范围不大，直接暴力应该也能过，复杂度是O(n)复杂度，所以先试了一下暴力解法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]==target)<span class="hljs-keyword">return</span> i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>二分算法优化，之前了解过二分的板子，所以这道题刷起来很快</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;r)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span>l+r&gt;&gt;<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]&gt;=target)r=mid;<br>            <span class="hljs-keyword">else</span> l=mid+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nums[l]==target)<span class="hljs-keyword">return</span> l;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/remove-element/description/">27. 移除元素 - 力扣（Leetcode）</a></p><ul><li>这道题用双指针就可以做</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; right &lt; n; right++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[right] != val) &#123;<br>                nums[left] = nums[right];<br>                left++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>代码随想录</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/12/04/Java/"/>
    <url>/2022/12/04/Java/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/11/22/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87/"/>
    <url>/2022/11/22/%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/11/04/%E8%AE%BA%E6%96%87/"/>
    <url>/2022/11/04/%E8%AE%BA%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h2 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git使用指南</title>
    <link href="/2022/10/25/Git/"/>
    <url>/2022/10/25/Git/</url>
    
    <content type="html"><![CDATA[<p>本问主要介绍在开发过程中Git常见的使用指南</p><span id="more"></span><p>支持多人合作的版本管理工具</p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AcWing算法基础课刷题</title>
    <link href="/2022/09/18/AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/"/>
    <url>/2022/09/18/AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/</url>
    
    <content type="html"><![CDATA[<p>本文讲述了北大闫学灿算法基础课学习笔记</p><span id="more"></span><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="快速排序（以j为划分条件）"><a href="#快速排序（以j为划分条件）" class="headerlink" title="快速排序（以j为划分条件）"></a>快速排序（以j为划分条件）</h3><ul><li>快速排序的主要思想是分治</li><li>步骤：<ul><li>找到分界点</li><li>使用双指针移动，把区间划分成两部分，左边的区间都小于等于x，右边的区间都大于等于x</li><li>递归处理左右两边</li></ul></li></ul><p><a href="https://www.acwing.com/solution/content/16777/">可行性分析和边界条件证明</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> q[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br>    <span class="hljs-type">int</span> s=<span class="hljs-built_in">rand</span>()%(r-l)+l;<br>    <span class="hljs-type">int</span> x=q[s],i=l<span class="hljs-number">-1</span>,j=r+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;j)&#123;<br>        <span class="hljs-keyword">do</span> i++;<span class="hljs-keyword">while</span>(q[i]&lt;x);<br>        <span class="hljs-keyword">do</span> j--;<span class="hljs-keyword">while</span>(q[j]&gt;x);<br>        <span class="hljs-keyword">if</span>(i&lt;j)<span class="hljs-built_in">swap</span>(q[i],q[j]);<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(q,l,j);<br>    <span class="hljs-built_in">quick_sort</span>(q,j+<span class="hljs-number">1</span>,r);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q[i]);<br>    <span class="hljs-built_in">quick_sort</span>(q,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,q[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="归并排序（双指针算法）"><a href="#归并排序（双指针算法）" class="headerlink" title="归并排序（双指针算法）"></a>归并排序（双指针算法）</h3><ul><li><p>归并排序的思想也是分治</p></li><li><p>步骤</p><ul><li>归并排序的思想是从中间分开，所以先确定分界点mid&#x3D;l+r&gt;&gt;1;</li><li>递归处理左右两部分</li><li>使用双指针算法，用两个指针从左右两段分别开始遍历，按照从小到大的顺序放到新数组里</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> q[N],tmp[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> l ,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">merge_sort</span>(q,l,mid);<br>    <span class="hljs-built_in">merge_sort</span>(q,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-type">int</span> i=l,j=mid+<span class="hljs-number">1</span>,k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;<br>        <span class="hljs-keyword">if</span>(q[i]&lt;q[j])tmp[k++]=q[i++];<br>        <span class="hljs-keyword">else</span> tmp[k++]=q[j++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid)tmp[k++]=q[i++];<br>    <span class="hljs-keyword">while</span>(j&lt;=r)tmp[k++]=q[j++];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l,j=<span class="hljs-number">0</span>;i&lt;=r;i++,j++)&#123;<br>        q[i]=tmp[j];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q[i]);<br>    <span class="hljs-built_in">merge_sort</span>(q,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,q[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><h3 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h3><ul><li><p>思想：二分的主要作用是找边界条件，二分和单调性没有关系，有单调性的题目一定可以用二分来做，但是没有单调性的题目，也可能会用二分来做，二分通常用来解决极值问题。</p></li><li><p>步骤：</p><ul><li>先把区间一分为二，通过判断mid是否在条件范围来判断来选择不同的模版<ul><li>找最大值：如果q[mid]&lt;&#x3D;x，l&#x3D;mid，否则r&#x3D;mid+1，这时候要注意mid&#x3D;l+r+1&gt;&gt;1</li><li>找最小值：如果q[mid]&gt;&#x3D;x，r&#x3D;mid，否则l&#x3D;mid</li></ul></li></ul></li><li><p><a href="https://www.acwing.com/problem/content/791/">题目</a></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> q[N],tmp[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> l ,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">merge_sort</span>(q,l,mid);<br>    <span class="hljs-built_in">merge_sort</span>(q,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-type">int</span> i=l,j=mid+<span class="hljs-number">1</span>,k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;<br>        <span class="hljs-keyword">if</span>(q[i]&lt;q[j])tmp[k++]=q[i++];<br>        <span class="hljs-keyword">else</span> tmp[k++]=q[j++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid)tmp[k++]=q[i++];<br>    <span class="hljs-keyword">while</span>(j&lt;=r)tmp[k++]=q[j++];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l,j=<span class="hljs-number">0</span>;i&lt;=r;i++,j++)&#123;<br>        q[i]=tmp[j];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q[i]);<br>    <span class="hljs-built_in">merge_sort</span>(q,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,q[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h3><ul><li><p>浮点数二分要比整数二分简单很多，不需要考虑太多边界情况</p></li><li><p>步骤</p><ul><li>浮点数判断的话，很难精确到具体的数值范围，所以只能用粗略估计都方法，一般认为当r-l&lt;1e-8时，就l&#x3D;&#x3D;r</li><li>浮点数二分只有一种情况，就是当q[mid]&lt;&#x3D;x l&#x3D;mid，否则r&#x3D;mid</li></ul></li><li><p>题目：求一个数的平方根</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">double</span> x;<br>    cin&gt;&gt;x;<br>    <span class="hljs-type">double</span> l=<span class="hljs-number">0</span>,r=x;<br>    <span class="hljs-keyword">while</span>(r-l&gt;<span class="hljs-number">1e-8</span>)&#123;<br>        <span class="hljs-type">double</span> mid=(l+r)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(mid*mid&lt;=x)l=mid;<br>        <span class="hljs-keyword">else</span> r=mid;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.6lf\n&quot;</span>,l);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="高精度运算"><a href="#高精度运算" class="headerlink" title="高精度运算"></a>高精度运算</h2><h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><ul><li>思想：高精度的思想是把大整数用字符串来存储，</li><li>步骤：<ul><li>首先用字符串输入两个大整数a,b，将字符串数组的每一位存储到一个vector里，为了方便计算，存储到时候要倒序存储</li><li>定义一个整数t用来存储每一位相加之后的结果，如果当前位数小于第一个整数的长度，则t+&#x3D;A[i]，如果当前位数小于第二个整数，则t+&#x3D;B[i]，将t取余10的余数存到新的数组C里，表示相加之后的结果，t&#x2F;&#x3D;10;</li><li>如果计算完之后t还不为0，说明t还有剩余，最高位进1，数组C里再插入一个1</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">add</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp;A,vector&lt;<span class="hljs-type">int</span>&gt;&amp;B)&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt;C;<br>    <span class="hljs-type">int</span> t=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;A.<span class="hljs-built_in">size</span>()||i&lt;B.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(i&lt;A.<span class="hljs-built_in">size</span>())t+=A[i];<br>        <span class="hljs-keyword">if</span>(i&lt;B.<span class="hljs-built_in">size</span>())t+=B[i];<br>        C.<span class="hljs-built_in">push_back</span>(t%<span class="hljs-number">10</span>);<br>        t/=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(t)C.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string a,b;<br>    vector&lt;<span class="hljs-type">int</span>&gt;A,B;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)A.<span class="hljs-built_in">push_back</span>(a[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=b.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)B.<span class="hljs-built_in">push_back</span>(b[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">auto</span> c=<span class="hljs-built_in">add</span>(A,B);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=c.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,c[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h3><ul><li>思想：高精度减法和高精度加法思想一致，都是把大整数转化成字符串进行运算</li><li>步骤：<ul><li>首先用字符串输入两个大正整数a,b，将字符串数组的每一位存储到一个vector里，为了方便计算，存储到时候要倒序存储</li><li>高精度减法首先需要判断两个数的大小，如果A&gt;B，则sub(A,B)，如果A&lt;B，则sub(B,A)，输出之前先输出一个负号，所以要手写一个比较函数cmp，比较两个数的大小，比较两个数大小的时候首先是比较位数，如果A的位数大于B的位数，则A&gt;B，如果位数相等，则从最高位依次比较A的每一位和B的每一位的大小，如果A的高位大于B的高位，则A&gt;B</li><li>减法运算首先定义一个r，用来表示相减之后的结果，刚开始r&#x3D;0，r&#x3D;A[i]-r，如果B的当前位数还有数，则用r-B[i]，用一个数组C来计算存储之后的结果，C.push_back((r+10)%10)，这个数不论正负，这样都能存储相减之后的正确结果，如果r&lt;0，则向上一位借一个1，r&#x3D;1，否则r&#x3D;0;</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;A,vector&lt;<span class="hljs-type">int</span>&gt;B)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(A.<span class="hljs-built_in">size</span>()!=B.<span class="hljs-built_in">size</span>())<span class="hljs-keyword">return</span> A.<span class="hljs-built_in">size</span>()&gt;B.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=A.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<span class="hljs-keyword">if</span>(A[i]!=B[i])<span class="hljs-keyword">return</span> A[i]&gt;B[i];<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">sub</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp;A,vector&lt;<span class="hljs-type">int</span>&gt;&amp;B)&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt;C;<br>    <span class="hljs-type">int</span> r;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,r=<span class="hljs-number">0</span>;i&lt;A.<span class="hljs-built_in">size</span>();i++)&#123;<br>        r=A[i]-r;<br>        <span class="hljs-keyword">if</span>(i&lt;B.<span class="hljs-built_in">size</span>())r-=B[i];<br>        C.<span class="hljs-built_in">push_back</span>((r+<span class="hljs-number">10</span>)%<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span>(r&lt;<span class="hljs-number">0</span>)r=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> r=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(C.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>&amp;&amp;C.<span class="hljs-built_in">back</span>()==<span class="hljs-number">0</span>)C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string a,b;<br>    vector&lt;<span class="hljs-type">int</span>&gt;A,B;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)A.<span class="hljs-built_in">push_back</span>(a[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=b.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)B.<span class="hljs-built_in">push_back</span>(b[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">auto</span> c=<span class="hljs-built_in">sub</span>(A,B);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">cmp</span>(A,B))&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=c.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,c[i]);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-&quot;</span>);<br>        c=<span class="hljs-built_in">sub</span>(B,A);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=c.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,c[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h3><ul><li>思想：一个大整数乘一个整数，思想也是把大整数转换成字符串，用一个变量t来表示进位，大整数的每一位与另一个数相乘，余数存到数组c里，进位加到下一位运算里</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">mul</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp;A,<span class="hljs-type">int</span> b)&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt;C;<br>    <span class="hljs-type">int</span> t=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;A.<span class="hljs-built_in">size</span>();i++)&#123;<br>        t+=A[i]*b;<br>        C.<span class="hljs-built_in">push_back</span>(t%<span class="hljs-number">10</span>);<br>        t/=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(t)C.<span class="hljs-built_in">push_back</span>(t);<br>    <span class="hljs-keyword">while</span>(C.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>&amp;&amp;C.<span class="hljs-built_in">back</span>()==<span class="hljs-number">0</span>)C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string a;<br>    vector&lt;<span class="hljs-type">int</span>&gt;A;<br>    <span class="hljs-type">int</span> b;<br>    cin &gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)A.<span class="hljs-built_in">push_back</span>(a[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">auto</span> c = <span class="hljs-built_in">mul</span>(A,b);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=c.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,c[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高精度除法"><a href="#高精度除法" class="headerlink" title="高精度除法"></a>高精度除法</h3><ul><li>思想：高精度除法是用一个大整数A除以一个整数b，余数为r，思想也是把大整数转化成字符串，用r来表示余数，余数初始化为0，每次用余数*10+大整数A的每一位，表示当前的除数，将除完以后的结果存储到c中，将余数赋值给r，为了保持和前面的模版输入输出一致，数组c要进行反转</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">div</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp;A,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> &amp;r)&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt;C;<br>    r=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=A.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        r=A[i]+r*<span class="hljs-number">10</span>;<br>        C.<span class="hljs-built_in">push_back</span>(r/b);<br>        r%=b;<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(C.<span class="hljs-built_in">begin</span>(),C.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">while</span>(C.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>&amp;&amp;C.<span class="hljs-built_in">back</span>()==<span class="hljs-number">0</span>)C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string a;<br>    vector&lt;<span class="hljs-type">int</span>&gt;A;<br>    <span class="hljs-type">int</span> b;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)A.<span class="hljs-built_in">push_back</span>(a[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-type">int</span> r;<br>    <span class="hljs-keyword">auto</span> c=<span class="hljs-built_in">div</span>(A,b,r);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=c.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,c[i]);<br>    cout&lt;&lt;endl&lt;&lt;r&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>前缀和：</p><ul><li>怎么求</li><li>作用：算一段区间内一段数的和</li><li>前缀和的初始化：s[i]&#x3D;s[i-1]+a[i]，注意i从1开始</li><li>区间和的求和公式  ：l~r的和等于s[r]-s[l-1];</li></ul><p>二维：按照面积算</p><p><img src="/../picture/image-20221102215603513.png" alt="image-20221102215603513"></p><p>前缀和的初始化：s[i] [j]&#x3D;s[i-1] [j]+s[i] [j-1]-s[i-1] [j-1]+a[i] [j] </p><p>子矩阵求和公式：[x1,y1]到[x2,y2]的区间和为s[x2] [y2]-s[x1-1] [y2]-s[x2] [y1-1]+s[x1-1] [y1-1]</p><p>前缀和和差分是逆运算</p><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><p>a数组是b数组的前缀和，b数组就是a数组的差分</p><p>O(n):B—&gt;A</p><p>O(1)时间操作原数组</p><p>b[l]+c，b[r+1]-c</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指offer刷题</title>
    <link href="/2022/08/26/%E5%89%91%E6%8C%87offer%E5%88%B7%E9%A2%98/"/>
    <url>/2022/08/26/%E5%89%91%E6%8C%87offer%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>LeetCode刷题</p><span id="more"></span><h2 id="剑指-Offer-50-第一个只出现一次的字符"><a href="#剑指-Offer-50-第一个只出现一次的字符" class="headerlink" title="剑指 Offer 50. 第一个只出现一次的字符"></a><a href="https://leetcode.cn/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/">剑指 Offer 50. 第一个只出现一次的字符</a></h2><p>在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。</p><p><strong>示例 1:</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">输入：s = <span class="hljs-string">&quot;abaccdeff&quot;</span><br>输出：&#x27;b&#x27;<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">输入：s = <span class="hljs-string">&quot;&quot;</span> <br>输出：&#x27; &#x27;<br></code></pre></td></tr></table></figure><p><strong>限制：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>&lt;= s 的长度 &lt;= <span class="hljs-number">50000</span><br></code></pre></td></tr></table></figure><p><strong>思路一</strong></p><p>首先理解一下题目，要找到一个字符，这个字符有两个特点，首先是只出现一次，其次是字符串的第一个，这时候首先想到的思路是用map存储每一个元素出现的次数，然后循环遍历map，找到第一个次数是1的元素，返回即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">firstUniqChar</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">byte</span> &#123;<br>    worldCount:=<span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">rune</span>]<span class="hljs-type">int</span>,<span class="hljs-number">8</span>)<br>    <span class="hljs-keyword">for</span> _,v:=<span class="hljs-keyword">range</span> s&#123;<br>        value,ok:=worldCount[v]<br>        <span class="hljs-keyword">if</span> ok&#123;<br>            worldCount[v]=value+<span class="hljs-number">1</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            worldCount[v]=<span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> _,v:=<span class="hljs-keyword">range</span> s&#123;<br>        <span class="hljs-keyword">if</span> worldCount[v]==<span class="hljs-number">1</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-type">byte</span>(v)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++">```<br><br><br><br>**思路<span class="hljs-number">2</span>**<br><br>每一个字符都对应一个ascii码，可以使用一维数组来存，直接使用数组的ascii码来存<br><br>```<span class="hljs-function">go</span><br><span class="hljs-function">func <span class="hljs-title">firstUniqChar</span><span class="hljs-params">(s string)</span> byte </span>&#123;<br>    var words [<span class="hljs-number">26</span>]<span class="hljs-type">int</span><br>    <span class="hljs-keyword">for</span> index,_:=range s&#123;<br>        words[s[index]-<span class="hljs-string">&#x27;a&#x27;</span>]+=<span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> index,_:=range s&#123;<br>        <span class="hljs-keyword">if</span> words[s[index]-<span class="hljs-string">&#x27;a&#x27;</span>]==<span class="hljs-number">1</span>&#123;<br>            <span class="hljs-keyword">return</span> s[index]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> cnt[<span class="hljs-number">26</span>];<br>    <span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">firstUniqChar</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">size</span>();i++)&#123;<br>            cnt[s[i]-<span class="hljs-string">&#x27;a&#x27;</span>]+=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">if</span>(cnt[s[i]-<span class="hljs-string">&#x27;a&#x27;</span>]==<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">return</span> s[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode刷题</title>
    <link href="/2022/08/26/LeetCode%E5%88%B7%E9%A2%98/"/>
    <url>/2022/08/26/LeetCode%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>LeetCode刷题</p><span id="more"></span>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《图解密码技术》学习笔记</title>
    <link href="/2022/08/21/%E3%80%8A%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/08/21/%E3%80%8A%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>本文讲述了《图解密码技术》一书的学习笔记</p><span id="more"></span><p><img src="/../picture/image-20220823095618150.png" alt="image-20220823095618150"></p><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p><img src="/../picture/image-20220823101826921.png" alt="书中出现的角色名称"></p><p>公钥密码&#x3D;非对称密码</p><p><img src="/../picture/image-20220823104747797.png" alt="信息安全面临的威胁与应对技术"></p><h3 id="单向散列函数解决了消息的完整性（一致性）问题"><a href="#单向散列函数解决了消息的完整性（一致性）问题" class="headerlink" title="单向散列函数解决了消息的完整性（一致性）问题"></a>单向散列函数解决了消息的完整性（一致性）问题</h3><ul><li>性质<ul><li>根据任意长度的消息计算出固定长度的散列值</li><li>能够快速计算出散列值</li><li>消息不同散列值也完全不同</li><li>具备单向性</li></ul></li><li>单向散列函数可以辨别篡改问题，无法辨别伪装问题，因此需要使用认证技术，认证技术包括消息验证码和数字签名</li></ul><h3 id="消息认证码识别篡改和伪装的"><a href="#消息认证码识别篡改和伪装的" class="headerlink" title="消息认证码识别篡改和伪装的"></a>消息认证码识别篡改和伪装的</h3><ul><li>消息+共享密钥</li></ul><p><img src="/../picture/image-20221031103038518.png" alt="image-20221031103038518"></p><h3 id="数字签名在消息认证码的基础上添加了防止访问策略"><a href="#数字签名在消息认证码的基础上添加了防止访问策略" class="headerlink" title="数字签名在消息认证码的基础上添加了防止访问策略"></a>数字签名在消息认证码的基础上添加了防止访问策略</h3>]]></content>
    
    
    
    <tags>
      
      <tag>密码学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解读程序是怎样跑起来的</title>
    <link href="/2022/07/28/%E8%A7%A3%E8%AF%BB%E7%A8%8B%E5%BA%8F%E6%98%AF%E6%80%8E%E6%A0%B7%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84/"/>
    <url>/2022/07/28/%E8%A7%A3%E8%AF%BB%E7%A8%8B%E5%BA%8F%E6%98%AF%E6%80%8E%E6%A0%B7%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<p>本文解读图灵系列丛书程序是怎样跑起来的</p><span id="more"></span><h2 id="什么是CPU？"><a href="#什么是CPU？" class="headerlink" title="什么是CPU？"></a>什么是CPU？</h2><p>​对于学计算机的我们来说，首次听到CPU的时候应该是一个非常高级的概念，并不了解到底什么事CPU，也不了解CPU内部都干了些什么事儿，这一部分，我带着大家慢慢来理解。</p><p>​众所周知，CPU内部是数百万至数亿个晶体管构成的，在CPU的内部，是由<strong>寄存器</strong>、<strong>控制器</strong>、<strong>运算器</strong>、<strong>时钟</strong>四部分构成的</p><p><img src="/../picture/image-20220730181208538.png" alt="CPU的内部构造"></p><ul><li>寄存器：用来暂存数据和指令</li><li>控制器：把内存上的指令和数据，读入寄存器中，并根据指令的执行结果来控制整个计算机</li><li>运算器：运算从内存中读入到寄存器中的数据</li><li>时钟：发出CPU开始计时的时钟信号</li></ul><p>​大家是否对CPU有了一定的认识和了解，那么接下来我们来了解一下什么是内存，内存就是我们常说的主存，用来存储指令和数据，内存当中的每一个字节都有一个地址编号，CPU通过这个地址来读取内存当中的指令和数据，存储在硬盘上的应用程序需要传输到内存上才能运行，当计算机关机之后，内存上的数据也自动清除。</p><h3 id="CPU是寄存器的集合体"><a href="#CPU是寄存器的集合体" class="headerlink" title="CPU是寄存器的集合体"></a>CPU是寄存器的集合体</h3><p>​其实对于计算机来说，识别不了我们日常编写的C语言、C++、Java等高级编程语言，计算机只能识别机器语言，机器语言就是一些计算机能识别的01代码串，机器语言级别的程序主要是通过寄存器来处理的,计算机底层语言汇编语言与机器语言的指令基本上是一一对应的，将汇编语言转化为机器语言这一过程称为汇编，反之则称为反汇编。</p><p><img src="/../picture/image-20220730182853527.png" alt="CPU中寄存器的种类和功能"></p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>​程序计数器想必大家都没听过，程序计数器存储了下一条指令所在的内存地址，所以程序计数器主要是决定程序执行的流程。</p><p><img src="/../picture/image-20220730183617885.png" alt="程序计数器的作用"></p><p>​那么我们知道了程序计数器用来控制程序的执行顺序，想一下，分支和循环语句是怎么控制的了？</p><p>​对于顺序执行的语句来说，每执行一个指令，程序计数器的值就自动加1，对于循环和分支来说，程序计数器的值肯定不是按顺序增加的了，接下来我们看一个用于输出一个数的绝对值的出鞥许计数器控制的例子</p><p><img src="/../picture/image-20220730184000119.png" alt="程序计数器控制分支语句"></p><p>​由上图可知，对于循环和分支语句，使用跳转指令来判断是否跳转,机器怎样判断是否跳转，这里就用到了标志寄存器，标志寄存器会保存累加计算之后的结果，标志寄存器的的第一个字节位、第二个字节位、第三个字节位运算结果分别表示正数、零和负数，CPU内部的比较其实是做减法运算的，通过减法运算之后的值表示大小。</p><h3 id="函数调用机制"><a href="#函数调用机制" class="headerlink" title="函数调用机制"></a>函数调用机制</h3><p>​通过上一小节的内容我们知道，分支和循环是由程序计数器和标志寄存器控制的，那么函数调用时怎么控制的了，我们想一下，函数的调用和分支循环语句是否一样？在函数调用结束以后，还要回到调用函数的下一行指令，那么这一步操作，就要比分支和循环复杂，这一操作基本没有办法实现，机器语言用到了call被return指令来解决这一问题，函数调用的时候使用call指令，不使用跳转指令，call指令会把调用函数之后要执行的指令放在栈中，在函数处理完之后，在函数的出口直行return指令，return指令就会把保存在栈中的地址返回到程序计数器中。</p><h3 id="数组内部是怎么调用的"><a href="#数组内部是怎么调用的" class="headerlink" title="数组内部是怎么调用的"></a>数组内部是怎么调用的</h3><p>​在上图CPU寄存器的种类中我们看到了基址寄存器和变址寄存器，通过这两个寄存器，对内存的地址进行了划分，对于一个数组，数组中元素的实际地址我们使用基址寄存器的值+变址寄存器的值来表示实际地址。基址寄存器相当于数组的首地址，变址寄存器相当于索引。</p><p><img src="/../picture/image-20220731085758742.png" alt="数组内部地址的表示"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>​通过上述内容的讲解，相信大家对CPU都有一定的认识和理解，其实CPU处理的功能都很简单，其实CPU能处理的功能如下表所示：</p><p><img src="/../picture/image-20220731090400768.png" alt="机器语言指令的主要类型和功能"></p><h2 id="数据的二进制表示"><a href="#数据的二进制表示" class="headerlink" title="数据的二进制表示"></a>数据的二进制表示</h2>]]></content>
    
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ STL</title>
    <link href="/2022/07/12/C++%20STL/"/>
    <url>/2022/07/12/C++%20STL/</url>
    
    <content type="html"><![CDATA[<p>本文介绍了一些C++常用的STL，容器</p><span id="more"></span><p>a.size() 获取数组长度</p><p>a.empty()  获取数组是否为空</p><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p>vector是一个变长数组</p><p>迭代器就是一个指针</p><p>迭代器一般和a.begin()和a.end()一起使用，区间是左闭右开</p><p>数组<code>vector&lt;int&gt;&#123;1,2,3,4,5&#125;</code></p><p><code>a[0]=a.front()=*a.begin()</code></p><p><code>a.back()=a[a.size()-1]</code> 获取到数组的最后一个元素</p><p>a.push_back(6) &#x2F;&#x2F;时间复杂度是o1</p><p>a.pop_back()删除最后一个元素</p><p>vector要比普通数组速度慢，vector涉及到拷贝的问题</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>先进先出，队首出队，队尾入队</p><p>优先队列：每次往外弹出的时候，默认弹出所有数的最大值</p><p>如果自己定义结构体优先队列的话，如果是大根堆，需要重载小于号，如果是小根堆，需要重载大于号</p><p>普通队列是一个循环队列</p><p>栈、队列、优先队列没有clear函数，其他STL容器都有clear函数</p><p>如果没有clear函数，怎样初始化q&#x3D;queue<int>();</p><h2 id="栈-stack"><a href="#栈-stack" class="headerlink" title="栈 stack"></a>栈 stack</h2><h2 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h2><h2 id="位运算和常用库函数"><a href="#位运算和常用库函数" class="headerlink" title="位运算和常用库函数"></a>位运算和常用库函数</h2><p>a&gt;&gt;k&amp;1，取出k位数字 </p><p>a&amp;(~a+1) 取出最后一位1</p><p>(~a+1)&#x3D;-a</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串就是字符数组+’\0’ </p><p>数组本身就是一个指针 </p><p>字符数组的输入遇到空格、换行等都会中断，读入一行数据可以使用fgets(s,100,stdin); 读入一行到一个字符数组</p><p>char s[100];</p><p>cin.getline(s,100);</p><p>puts(s)</p><p>cin读入一行数据</p><p>string：字符串 getline(cin,s); 把一行读入到一个string里</p><p>char数组用c语言方式读入的时候不需要加&amp;符号</p><p>char数组：</p><ul><li>数组名称就是地址</li><li>scanf(“%s”,s);</li><li>cin&gt;&gt;s+1；从下标1开始</li><li>cout&lt;&lt;s;</li><li>printf(“%s”,s);</li><li>gets &#x2F;&#x2F;淘汰</li><li>fgets(s,1000,stdin);</li><li>cin.getline(s,100);</li><li>puts(s)</li><li>strlen(s) &#x2F;&#x2F;获取字符串的长度，不包括’\0’</li><li>strcmp(s) &#x2F;&#x2F;比较字典序的大小，通过返回值来判断</li></ul><blockquote><p>输入输出字典序问题一般和贪心问题来一起解决</p></blockquote><p>string:</p><ul><li>getline(cin,s);</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安全多方计算</title>
    <link href="/2022/07/07/%E5%AE%89%E5%85%A8%E5%A4%9A%E6%96%B9%E8%AE%A1%E7%AE%97/"/>
    <url>/2022/07/07/%E5%AE%89%E5%85%A8%E5%A4%9A%E6%96%B9%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p>本文是学习安全多方计算过程中的一些笔记和心得，欢迎大家留言讨论</p><span id="more"></span><h2 id="关于智能合约的描述"><a href="#关于智能合约的描述" class="headerlink" title="关于智能合约的描述"></a>关于智能合约的描述</h2><p><img src="/../picture/image-20221103103238744.png" alt="image-20221103103238744"></p>]]></content>
    
    
    
    <tags>
      
      <tag>论文</tag>
      
      <tag>安全多方计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>现代密码学学习笔记</title>
    <link href="/2022/07/06/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/07/06/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>本文主要是北京邮电大学网络空间安全学院谷利泽老师的现代密码学课堂学习笔记</p><span id="more"></span><h2 id="第一讲-绪论"><a href="#第一讲-绪论" class="headerlink" title="第一讲 绪论"></a>第一讲 绪论</h2><p>​    密码学中用到的密码和我们平时生活中接触到的密码有很大的区别，我们平时用到的例如qq、微信等密码不能称作是密码，只是简单的口令而已，口令只是身份验证的凭据。</p><p>现代密码学的主要功能：</p><ul><li>机密性</li><li>完整性</li><li>认证性</li><li>不可否认性</li></ul><p><img src="/../picture/image-20220706095935765.png" alt="image-20220706095935765"></p><h2 id="第二章-传统密码技术"><a href="#第二章-传统密码技术" class="headerlink" title="第二章 传统密码技术"></a>第二章 传统密码技术</h2><ul><li>置换算法<ul><li>行置换</li><li>周期置换</li></ul></li><li>代换算法</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>现代密码学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++类、指针和引用</title>
    <link href="/2022/07/03/C++%E7%B1%BB%E3%80%81%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8/"/>
    <url>/2022/07/03/C++%E7%B1%BB%E3%80%81%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>本文介绍了刷题中常用到的类和结构体的用法</p><span id="more"></span><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><h3 id="C-中的类"><a href="#C-中的类" class="headerlink" title="C++中的类"></a>C++中的类</h3><p>​      对于程序来说，类可以将变量、数组、函数完美的打包在一起，这就是类的最基本的用法。</p><p>对于类来说，常用到的类的属性有public和private两种</p><ul><li>private:里面的内容只能在类里面调用，如果想要访问私有变量的话，可以在public里写一个函数让外部调用</li><li>public:里面的内容可以在类的外部访问</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> age,height;<br>    <span class="hljs-type">double</span> money;<br>    string books[<span class="hljs-number">100</span>];<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_money</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><span class="hljs-keyword">public</span>:<br>    string name;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">say</span><span class="hljs-params">()</span></span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;I&#x27;m&quot;</span>&lt;&lt;name&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_age</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_money</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span>&#123;<br>        money+=x;<br>    &#125;<br>    <span class="hljs-function">string <span class="hljs-title">get_name</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;c;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//    Person c;</span><br>    c.name=<span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-comment">//    c.age = 18;</span><br>    c.<span class="hljs-built_in">add_money</span>(<span class="hljs-number">1000</span>);<br>    cout&lt;&lt;c.<span class="hljs-built_in">get_name</span>()&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>类中的变量和函数统一被称为类的成员变量</p></blockquote><p>结构体和类的作用是基本是一样的，类中默认是private，结构体中默认是<a href="">public</a></p><p><strong>构造函数：</strong></p><ul><li>构造函数没有类型，函数名称和结构体名称一样</li><li>构造函数必须写到public里</li></ul><p><strong>结构体：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-type">int</span> age,height;<br>    <span class="hljs-type">double</span> money;<br>    <span class="hljs-built_in">Person</span>()&#123;&#125;;<br>    <span class="hljs-built_in">Person</span> (<span class="hljs-type">int</span> _age,<span class="hljs-type">int</span> _height)&#123;<br>        age=_age;<br>        height=_height;<br>    &#125;<br>    <span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> _age,<span class="hljs-type">int</span> _height,<span class="hljs-type">double</span> _money):<span class="hljs-built_in">age</span>(_age),<span class="hljs-built_in">height</span>(_height),<span class="hljs-built_in">money</span>(_money)&#123;&#125;;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Person p;<br>    <span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">23</span>,<span class="hljs-number">180</span>,<span class="hljs-number">100.0</span>)</span></span>;<br>    Person p2 = &#123;<span class="hljs-number">18</span>,<span class="hljs-number">180</span>&#125;;<br>    cout&lt;&lt;p1.money&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>类和结构体的初始化</strong></p><ul><li>初始化的时候可以直接用构造函数来初始化，比如说：Person p(age,height);</li><li>也可以在结构体定义的时候初始化</li><li>也可以使用指针来初始化，例如：Person *p&#x3D;new Person(age,height);</li></ul><h3 id="指针和引用"><a href="#指针和引用" class="headerlink" title="指针和引用"></a>指针和引用</h3><p>​内存就好像是一个很大的存储数组，每一个存储在数组中的元素都有一个对应的地址来表示，定义指针的时候用*来定义，例如<code>int *p=&amp;a</code>，输出p就是输出了a的地址，输出*p就是输出了a的值，p就存放了a的地址，通过p就可以修改和表示a</p><p>​p的地址也可以用指针来存储，可以定义成<code>int **q=&amp;p</code>，q表示p的地址，*q表示a的地址，**q表示的是a的值，这种写法就类似于套娃，指针可以套指针</p><ul><li>局部变量开到栈空间里，全局变量开到堆空间里</li><li>栈和堆的新增数值方向是不同的</li></ul><p><img src="/../picture/memoharachy.jpeg" alt="img"></p><p>​数组本身就是一个指针，存的数组开始的地方，数组名就是数组第一个元素的首地址，输出<code>a</code>就能输出数组第一个元素的首地址，输出<code>*a</code>就是数组第一个元素的值，可以通过输出<code>*(a+n)</code>的值来表示后面的元素</p><ul><li>数组的名字就是指针，是数组第一个元素的地址</li><li>数组的地址是连续的一段，相邻两个元素相差的地址根据元素的类型决定</li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>​    引用和指针类似，相当于给变量起了一个别名，通过另一个名字来改变原来变量的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br>  <span class="hljs-type">int</span> *p=&amp;a;  <span class="hljs-comment">//指针</span><br>  <span class="hljs-type">int</span> &amp;p=a; <span class="hljs-comment">//引用或者别名 p和a存在统一个地址上了 </span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>​链表是数据结构当中的一种结构，一般使用结构体来定义，链表相当于用一串链子把数据连接起来了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//链表的声明</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">NodeList</span>&#123;<br>    <span class="hljs-type">int</span> val;<br>    NodeList* next;<br>    <span class="hljs-built_in">NodeList</span>(<span class="hljs-type">int</span> _val):<span class="hljs-built_in">val</span>(_val),<span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>)&#123;&#125;<br>&#125;;<br><span class="hljs-comment">//链表的初始化及遍历</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">auto</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">NodeList</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">auto</span> q = <span class="hljs-keyword">new</span> <span class="hljs-built_in">NodeList</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">auto</span> o = <span class="hljs-keyword">new</span> <span class="hljs-built_in">NodeList</span>(<span class="hljs-number">3</span>);<br>    p-&gt;next =q;<br>    q-&gt;next=o;<br>    <span class="hljs-keyword">auto</span> head = p;<br>    <span class="hljs-keyword">for</span>(NodeList* i=head;i;i=i-&gt;next)&#123;<br>        cout&lt;&lt;i-&gt;val&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>注：调用的成员变量是一个变量的话用p.val和p.next</p><p>​      如果调用的成员变量是一个指针的话用p-&gt;val和p-&gt;next </p></blockquote><p><img src="/../picture/image-20220706221311294.png" alt="image-20220706221311294"></p><ul><li><p>头结点一般存在head里，head存的是头结点的地址】</p></li><li><p>头结点一般说的是第一个结点的地址，而不是值</p></li><li><p>链表的删除不是真正的删除</p></li><li><p>c++字符串切割<code>s.substr(0,n);</code> </p></li><li><p>c++字符串转化成整数 <code>stoi(str);</code></p></li><li><p>c++字符串长度获取<code>str.size();</code></p></li><li><p>c++三种空节点的表示形式</p><ul><li>0</li><li>NULL</li><li>nullptr</li></ul></li></ul><p><img src="/../picture/image-20220711100219197.png" alt="image-20220711100219197"></p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
